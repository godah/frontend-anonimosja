
$ npm install -g cordova ionic

//escolha um
$ ionic start myApp tabs
$ ionic start myApp blank
$ ionic start myApp sidemenu

$ ionic serve

build apk http://ionicframework.com/docs/v1/guide/publishing.html

//?
$ ionic cordova plugin rm cordova-plugin-console

//rodar em Android 4.1
$ cordova plugin add cordova-plugin-crosswalk-webview --save

//gerar apk
$ ionic cordova build --release android

//rodar dispositivo ou emulador
$ ionic cordova run android

//? publicar?
$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000

ionic cordova platform add ios
$ ionic cordova platform add android

$ ionic start myApp sidemenu


*****
config.xml
add <preference name="loadUrlTimeoutValue" value="700000" />
*****
error de compilação crosswalk
So you need use the command of cordova plugin add https://github.com/crosswalk-project/cordova-plugin-crosswalk-webview.git.
We will upgrade the version in the npm as soon as possible.

*********
assinar

Let’s generate our private key using the keytool command that comes with the JDK. If this tool isn’t found, refer to the installation guide:

$ keytool -genkey -v -keystore nome_da_chave.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000


To sign the unsigned APK, run the jarsigner tool which is also included in the JDK:

$ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore nome_da_chave.keystore nome_do_app_unsigned.apk alias_name

*pegar o zipalign na pasta do androidSDK
This signs the apk in place. Finally, we need to run the zip align tool to optimize the APK. The zipalign tool can be found in /path/to/Android/sdk/build-tools/VERSION/zipalign. For example, on OS X with Android Studio installed, zipalign is in ~/Library/Android/sdk/build-tools/VERSION/zipalign:

$ zipalign -v 4 nome_do_app-unsigned.apk Nome_do_App_Final.apk





